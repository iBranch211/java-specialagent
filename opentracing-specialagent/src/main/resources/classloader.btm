# Copyright 2018 The OpenTracing Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

RULE OpenTracing SpecialAgent Intercept for ClassLoader$findClass (returning null)

CLASS ^java.lang.ClassLoader

METHOD Class findClass(String)
AT EXIT
BIND
  mutex:java.util.Set = io.opentracing.contrib.specialagent.ClassLoaderAgent$FindClass.mutex.get();
  bytecode:byte[] = $! == null && mutex.add($1) ? io.opentracing.contrib.specialagent.SpecialAgent.findClass($0, $1) : null;
  cls:Class = bytecode == null ? null : $0.defineClass($1, bytecode, 0, bytecode.length, null);
IF cls != null
DO
  traceln(">>>>>>>> defineClass(" + $1 + ")");
  mutex.remove($1);
  $! = cls;
ENDRULE

RULE OpenTracing SpecialAgent Intercept for ClassLoader$findClass (throwing ClassNotFoundException)

CLASS ^java.lang.ClassLoader

METHOD Class findClass(String)
AT EXCEPTION EXIT
BIND
  mutex:java.util.Set = io.opentracing.contrib.specialagent.ClassLoaderAgent$FindClass.mutex.get();
  bytecode:byte[] = mutex.add($1) ? io.opentracing.contrib.specialagent.SpecialAgent.findClass($0, $1) : null;
  cls:Class = bytecode == null ? null : $0.defineClass($1, bytecode, 0, bytecode.length, null);
IF cls != null
DO
  traceln(">>>>>>>> defineClass(" + $1 + ")");
  mutex.remove($1);
  RETURN cls;
ENDRULE

RULE OpenTracing SpecialAgent Intercept for ClassLoader$findResource

CLASS ^java.lang.ClassLoader

METHOD java.net.URL findResource(String)
AT EXIT
BIND
  mutex:java.util.Set = io.opentracing.contrib.specialagent.ClassLoaderAgent$FindResource.mutex.get();
  resource:java.net.URL =  $! == null && mutex.add($1) ? io.opentracing.contrib.specialagent.SpecialAgent.findResource($0, $1) : null;
IF resource != null
DO
  traceln(">>>>>>>> findResource(" + $1 + "): " + resource);
  mutex.remove($1);
  $! = resource;
ENDRULE

RULE OpenTracing SpecialAgent Intercept for ClassLoader$findResources

CLASS ^java.lang.ClassLoader

METHOD java.util.Enumeration findResources(String)
AT EXIT
BIND
  mutex:java.util.Set = io.opentracing.contrib.specialagent.ClassLoaderAgent$FindResources.mutex.get();
  resources:java.util.Enumeration = mutex.add($1) ? io.opentracing.contrib.specialagent.SpecialAgent.findResources($0, $1) : null;
IF resources != null
DO
  traceln(">>>>>>>> findResources(" + $1 + "): " + resources);
  mutex.remove($1);
  $! = $! != null && $!.hasMoreElements() ? new io.opentracing.contrib.specialagent.CompoundEnumeration(new java.util.Enumeration[] {$!, resources}) : resources;
ENDRULE
RULE OpenTracing SpecialAgent Intercept for ClassLoader#findClass

CLASS ^java.lang.ClassLoader

METHOD Class findClass(String)
BIND
  bytecode:byte[] = io.opentracing.contrib.specialagent.ClassLoaderAgent.FindClass.mutex.get().add($1) ? io.opentracing.contrib.specialagent.Agent.findClass($0, $1) : null;
  cls:Class = bytecode == null ? null : $0.defineClass($1, bytecode, 0, bytecode.length, null);
IF cls != null
DO
  traceln(">>>>>>>> defineClass(" + $1 + ")");
  io.opentracing.contrib.specialagent.ClassLoaderAgent.FindClass.mutex.get().remove($1);
  RETURN cls;
ENDRULE

RULE OpenTracing SpecialAgent Intercept for ClassLoader#findResource

CLASS ^java.lang.ClassLoader

METHOD java.net.URL findResource(String)
BIND
  resource:java.net.URL = io.opentracing.contrib.specialagent.Agent.findResource($0, $1);
IF resource != null
DO
  traceln(">>>>>>>> findResource(" + $1 + "): " + resource);
  RETURN resource;
ENDRULE

RULE OpenTracing SpecialAgent Intercept for ClassLoader#findResources

CLASS ^java.lang.ClassLoader

METHOD java.util.Enumeration findResources(String)
BIND
  resources:java.util.Enumeration = io.opentracing.contrib.specialagent.Agent.findResources($0, $1);
IF resources != null
DO
  RETURN new sun.misc.CompoundEnumeration(new java.util.Enumeration[] {$!, resources});
ENDRULE